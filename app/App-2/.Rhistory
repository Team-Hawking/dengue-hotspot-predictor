sqrt(2)
swirl()
library(swirl())
ls()
rm(list=ls())
swirl()
0.997 * .001
(1-0.997) * (1-0.001)
(1-0.985) * (1-0.001)
(1-0.997) * (1-0.001)
(.997*.001) / (.997*.001 + .015*.999)
1/6*(1+2+3+4+5+6)
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
dice_low
expect_dice(dice_low)
.5 * (edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
swirl()
swirl()
rm(list=ls())
swirl()
1
swirl()
setwd("~/github/team-hawking/dengue-hotspot-predictor/app")
install.packages("shiny")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Temperature distribution"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Temperature distribution"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Temperature in Â°C",
main = "Histogram of temperature distribution")
})
}
shinyApp(ui = ui, server = server)
counties <- readRDS("data/counties.rds")
setwd("~/github/team-hawking/dengue-hotspot-predictor/app/App-2")
counties <- readRDS("data/counties.rds")
head(counties)
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% Vegetation")
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
percent_map(var = data, color = "red", legend.title = "Risk prone zone")
})
}
# Run app ----
shinyApp(ui, server)
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("Risk prone zone"),
sidebarLayout(
sidebarPanel(
helpText("Create demo maps"),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent High" = counties$white,
"Percent Moderate" = counties$black,
"Percent Mild" = counties$hispanic,
"Percent Low" = counties$asian)
percent_map(var = data, color = "red", legend.title = "Risk prone zone")
})
}
# Run app ----
shinyApp(ui, server)
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("Risk prone"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent High" = counties$white,
"Percent Moderate" = counties$black,
"Percent Mild" = counties$hispanic,
"Percent Low" = counties$asian)
percent_map(var = data, color = "red", legend.title = "Risk prone zone")
})
}
# Run app ----
shinyApp(ui, server)
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("Risk prone"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent High" = counties$white,
"Percent Moderate" = counties$black,
"Percent Mild" = counties$hispanic,
"Percent Low" = counties$asian)
percent_map(var = data, color = "red", legend.title = "Risk prone zone", min=0, max=100)
})
}
# Run app ----
shinyApp(ui, server)
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
percent_map(var = data, color = "red", legend.title = "Risk Prone Zone", max = 100, min = 0)
})
}
# Run app ----
shinyApp(ui, server)
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("Risk prone zones"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from NASA"),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"High Risk" = counties$white,
"Moderate Risk" = counties$black,
"Mild Risk" = counties$hispanic,
"Low Risk" = counties$asian)
percent_map(var = data, color = "red", legend.title = "Risk Prone Zone", max = 100, min = 0)
})
}
# Run app ----
shinyApp(ui, server)
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from NASA"),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"High Risk" = counties$white,
"Moderate Risk" = counties$black,
"Mild Risk" = counties$hispanic,
"Low Risk" = counties$asian)
percent_map(var = data, color = "red", legend.title = "Risk Prone Zone", max = 100, min = 0)
})
}
# Run app ----
shinyApp(ui, server)
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"Percent White" = counties$white,
"Percent Black" = counties$black,
"Percent Hispanic" = counties$hispanic,
"Percent Asian" = counties$asian)
percent_map(var = data, color = ?, legend.title = ?, max = ?, min = ?)
})
}
# Run app ----
shinyApp(ui, server)
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
data <- switch(input$var,
"High risk" = counties$white,
"Moderate risk" = counties$black,
"Mild risk" = counties$hispanic,
"Low risk" = counties$asian)
percent_map(var = data, color = "red", legend.title = "Risk distribution", max = 100, min = 0)
})
}
# Run app ----
shinyApp(ui, server)
